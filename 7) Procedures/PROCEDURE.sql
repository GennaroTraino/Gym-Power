CREATE OR REPLACE PROCEDURE CREA_SCHEDA
(
	CF 			SCHEDA_ESERCIZI.CF_ISTRUTTORE_SCHEDA%TYPE,
	DIFFICOLTA 		SCHEDA_ESERCIZI.LIVELLO%TYPE,
	ESERCIZIO_1 	 	CONTIENE.NOME_ESERCIZIO%TYPE,
	SERIE_1 			CONTIENE.N_SERIE%TYPE,
	RIPETIZIONI_1 		CONTIENE.N_RIPETIZIONI%TYPE,
	ESERCIZIO_2 		CONTIENE.NOME_ESERCIZIO%TYPE,
	SERIE_2 			CONTIENE.N_SERIE%TYPE,		
	RIPETIZIONI_2 		CONTIENE.N_RIPETIZIONI%TYPE,
	ESERCIZIO_3 		CONTIENE.NOME_ESERCIZIO%TYPE,
	SERIE_3 			CONTIENE.N_SERIE%TYPE,
	RIPETIZIONI_3 		CONTIENE.N_RIPETIZIONI%TYPE,
	ESERCIZIO_4 		CONTIENE.NOME_ESERCIZIO%TYPE,
	SERIE_4 			CONTIENE.N_SERIE%TYPE,
	RIPETIZIONI_4 		CONTIENE.N_RIPETIZIONI%TYPE,
	ESERCIZIO_5 		CONTIENE.NOME_ESERCIZIO%TYPE,
	SERIE_5 			CONTIENE.N_SERIE%TYPE,
	RIPETIZIONI_5 		CONTIENE.N_RIPETIZIONI%TYPE,
	ESERCIZIO_6 		CONTIENE.NOME_ESERCIZIO%TYPE,
	SERIE_6 			CONTIENE.N_SERIE%TYPE,
	RIPETIZIONI_6 		CONTIENE.N_RIPETIZIONI%TYPE
)

IS
NUMERO			   NUMBER;
FLAG 			   NUMBER;
ESERCIZIO_EXC EXCEPTION;

BEGIN

-- CONTA GLI ESERCIZI DA INSERIRE
	SELECT COUNT(*) INTO FLAG
	FROM ESERCIZIO
	WHERE NOME = ESERCIZIO_1 OR NOME = ESERCIZIO_2 OR
		  NOME = ESERCIZIO_3 OR NOME = ESERCIZIO_4 OR
		  NOME = ESERCIZIO_5 OR NOME = ESERCIZIO_6;

-- SE MINORI DI 2 LANCIA ECCEZIONE
	IF(FLAG < 2) 
	THEN RAISE ESERCIZIO_EXC;
	END IF;

-- CONTA IL NUMERO MASSIMO DI ID SCHEDA ASSEGNATO PER CALCOLARE E INSERIRE L'ID DELLA SUCCESSIVA
	SELECT MAX(N_SCHEDA) INTO NUMERO
	FROM SCHEDA_ESERCIZI;

	NUMERO := NUMERO + 1;


-- CREA LA SCHEDA
		INSERT INTO SCHEDA_ESERCIZI VALUES(CF,NUMERO,DIFFICOLTA);
-- INSERISCE I PRIMI 2 ESERCIZI
		INSERT INTO CONTIENE VALUES(NUMERO,ESERCIZIO_1,SERIE_1,RIPETIZIONI_1);
		INSERT INTO CONTIENE VALUES(NUMERO,ESERCIZIO_2,SERIE_2,RIPETIZIONI_2);
-- CONTROLLA SE C'E' UN ALTRO ESERCIZIO LO INSERISCE
	IF (ESERCIZIO_3 IS NOT NULL) THEN
		INSERT INTO CONTIENE VALUES(NUMERO,ESERCIZIO_3,SERIE_3,RIPETIZIONI_3);
	END IF;

	IF (ESERCIZIO_4 IS NOT NULL) THEN
		INSERT INTO CONTIENE VALUES(NUMERO,ESERCIZIO_4,SERIE_4,RIPETIZIONI_4);
	END IF;

	IF (ESERCIZIO_5 IS NOT NULL) THEN
		INSERT INTO CONTIENE VALUES(NUMERO,ESERCIZIO_5,SERIE_5,RIPETIZIONI_5);
	END IF;

	IF (ESERCIZIO_6 IS NOT NULL) THEN
		INSERT INTO CONTIENE VALUES(NUMERO,ESERCIZIO_6,SERIE_6,RIPETIZIONI_6);
	END IF;

EXCEPTION
	WHEN ESERCIZIO_EXC THEN
		RAISE_APPLICATION_ERROR(-20451, 'NON PUOI INSERIRE UN SOLO ESERCIZIO');


END CREA_SCHEDA;
/



CREATE OR REPLACE PROCEDURE SOTTOSCRIVI_ABBONAMENTO
(
	CF_I 			ISCRITTO.CF_ISCRITTO%TYPE,
	N_MESI 			NUMBER
)

IS 
BADGE_I 			ABBONAMENTO.BADGE%TYPE;
DURATA_NON_VALIDA 	EXCEPTION;

BEGIN

-- CONTROLLA CHE LA RICHIESTA DELL ABBONAMENTO NON SIA DIVERSA DI 1,3,6 O 12 MESI
IF(N_MESI <> 1 AND N_MESI <> 3 AND N_MESI <> 6 AND N_MESI <> 12)
	THEN RAISE DURATA_NON_VALIDA;
END IF;

-- SELEZIONA IL BADGE CHE STA USANDO L'ISCRITTO PER RINNOVARLO
-- SE L'ISCRITTO NON HA BADGE O E' LA PRIMA VOLTA CHE SOTTOSCRIVE UN ABBONAMENTO BADGE SARA' NULL
-- E SARA' GENERATO DAL TRIGGER
	SELECT MAX(BADGE) INTO BADGE_I
	FROM ISCRITTO JOIN ABBONAMENTO ON CF_ISCRITTO = CF_ISCRITTO_ABBONAMENTO
	WHERE CF_I = CF_ISCRITTO;


DELETE FROM ABBONAMENTO WHERE BADGE = BADGE_I;
INSERT INTO ABBONAMENTO VALUES (BADGE_I,CF_I,SYSDATE,SYSDATE+(30 * N_MESI));



EXCEPTION
WHEN DURATA_NON_VALIDA THEN
	RAISE_APPLICATION_ERROR(-20564,'LA DURATA DELL ABBONAMENTO PUO ESSERE DI 1,2,3,6 O 12 MESI');
WHEN NO_DATA_FOUND THEN
    BADGE_I := NULL;

END SOTTOSCRIVI_ABBONAMENTO;
/


CREATE OR REPLACE PROCEDURE INFO_ISCRITTO
(
	CF_I            ISCRITTO.CF_ISCRITTO%TYPE
)
IS

USER 				ISCRITTO%ROWTYPE;
BADGE_IN 			ABBONAMENTO.BADGE%TYPE;
DATA_IN 	 		ABBONAMENTO.DATA_INIZIO%TYPE;
DATA_FN 			ABBONAMENTO.DATA_SCADENZA%TYPE;
LIVELLO_IN 			SCHEDA_ESERCIZI.LIVELLO%TYPE;
CORSI 			 	PREVEDE%ROWTYPE;
LISTA 				CONTIENE%ROWTYPE;
NO_SCHEDA  			EXCEPTION;
CURSOR CORSI_SCHEDA IS
	-- MOSTRA I CORSI A CUI Ã¨ ISCRITTO L'UTENTE
	SELECT BADGE_FK,CAP_CORSO_FK,NOME_CORSO_FK
	FROM ISCRITTO JOIN ABBONAMENTO  ON CF_ISCRITTO = CF_ISCRITTO_ABBONAMENTO
		JOIN PREVEDE ON BADGE_FK = BADGE
	WHERE CF_ISCRITTO = CF_I;

CURSOR LISTA_ES IS
	-- LA LISTA DI ESERCIZI NELLA SCHEDA
	SELECT E.N_SCHEDA_FK,C.NOME_ESERCIZIO,C.N_SERIE,C.N_RIPETIZIONI
	FROM SCHEDA_ESERCIZI S JOIN CONTIENE C ON S.N_SCHEDA = C.N_SCHEDA_FK
		JOIN E_ASSEGNATA E ON E.N_SCHEDA_FK = C.N_SCHEDA_FK
	WHERE CF_ISCRITTO_FK = CF_I;



BEGIN

SELECT CF_ISCRITTO,TELEFONO,NOME,COGNOME,SESSO,DATA_NASCITA INTO USER
FROM ISCRITTO 
WHERE CF_ISCRITTO = CF_I;

-- MOSTRA INFORMAZIONI BASE DELL'ISCRITTO
DBMS_OUTPUT.PUT_LINE('NOME: ' 		|| USER.NOME);
DBMS_OUTPUT.PUT_LINE('COGNOME: ' 	|| USER.COGNOME);
DBMS_OUTPUT.PUT_LINE('SESSO: '		|| USER.SESSO);
DBMS_OUTPUT.PUT_LINE('TELEFONO: '	|| USER.TELEFONO);

-- INFORMAZIONI SU ABBONAMENTO
SELECT BADGE, DATA_INIZIO, DATA_SCADENZA INTO BADGE_IN,DATA_IN,DATA_FN
FROM ISCRITTO JOIN ABBONAMENTO  ON CF_ISCRITTO = CF_ISCRITTO_ABBONAMENTO
WHERE CF_ISCRITTO = CF_I;

DBMS_OUTPUT.PUT_LINE('BADGE ABBONAMENTO: ' 		|| BADGE_IN);
DBMS_OUTPUT.PUT_LINE('DATA INIZIO: ' 			|| DATA_IN);
DBMS_OUTPUT.PUT_LINE('DATA SCADENZA: '			|| DATA_FN);
DBMS_OUTPUT.PUT_LINE('DURATA RIMANENTE: ' 		|| TRUNC(TO_NUMBER(DATA_FN-SYSDATE)) || ' GIORNI');


OPEN CORSI_SCHEDA;

IF CORSI_SCHEDA%NOTFOUND THEN
	CLOSE CORSI_SCHEDA;
END IF;

LOOP
	FETCH CORSI_SCHEDA INTO CORSI;
	EXIT WHEN CORSI_SCHEDA%NOTFOUND;
	DBMS_OUTPUT.PUT_LINE('CORSO: ' || CORSI.NOME_CORSO_FK || CORSI.CAP_CORSO_FK);
END LOOP;
CLOSE CORSI_SCHEDA;

SELECT LIVELLO INTO LIVELLO_IN
FROM ISCRITTO JOIN E_ASSEGNATA ON CF_ISCRITTO = CF_ISCRITTO_FK
	JOIN SCHEDA_ESERCIZI ON N_SCHEDA = N_SCHEDA_FK
WHERE CF_ISCRITTO = CF_I;
DBMS_OUTPUT.PUT_LINE('DETTAGLIO SCHEDA ALLENAMENTO');
DBMS_OUTPUT.PUT_LINE('LIVELLO SCHEDA: '			|| LIVELLO_IN);
DBMS_OUTPUT.PUT_LINE('ESERCIZI: ');


-- MOSTRA SCHEDA UTENTE CON ESERCIZI
OPEN LISTA_ES;

IF LISTA_ES%NOTFOUND THEN
	RAISE NO_SCHEDA;
	CLOSE LISTA_ES;
END IF;

LOOP
	FETCH LISTA_ES INTO LISTA;
	EXIT WHEN LISTA_ES%NOTFOUND;
	DBMS_OUTPUT.PUT_LINE(' ');
	DBMS_OUTPUT.PUT_LINE('NOME: ' || LISTA.NOME_ESERCIZIO || 'SERIE: ' || LISTA.N_SERIE || ' x ' || LISTA.N_RIPETIZIONI); 
END LOOP;
CLOSE LISTA_ES;




EXCEPTION
WHEN NO_DATA_FOUND THEN
	RAISE_APPLICATION_ERROR(-20543,'ISCRITTO NON ESISTENTE');
WHEN NO_SCHEDA THEN
	DBMS_OUTPUT.PUT_LINE('L ISCRITTO NON POSSIEDE UNA SCHEDA ESERCIZI');

END INFO_ISCRITTO;
/

CREATE OR REPLACE PROCEDURE LISTA_TURNI_ISTRUTTORE
(
	CF 	TURNO.CF_ISTRUTTORE_TURNO%TYPE
)
IS

CONTA_TURNI 	NUMBER;
NOT_TURNO 		EXCEPTION;
NOME_IS 		ISTRUTTORE.NOME%TYPE;
COGNOME_IS 		ISTRUTTORE.COGNOME%TYPE;
LISTA_IN 		TURNO%ROWTYPE;
CORSO_I 		CORSO%ROWTYPE;

CURSOR LISTA IS 
	SELECT CF_ISTRUTTORE_TURNO,CAP_TURNO,DATA_TURNO,ORA_TURNO,ORA_OUT_TURNO
	FROM TURNO
	WHERE CF_ISTRUTTORE_TURNO = CF;

CURSOR CORSO_ISTRUTTORE IS 
	SELECT CF_ISTRUTTORE_CORSO,CAP_CORSO,NOME_CORSO,DATA_INIZIO_CORSO,DATA_FINE_CORSO,ORA_INIZIO_CORSO
	FROM ISTRUTTORE JOIN CORSO ON CF_ISTRUTTORE = CF_ISTRUTTORE_CORSO
	WHERE CF_ISTRUTTORE = CF;


BEGIN
-- CONTA I TURNI TOTALI E PRENDE NOME E COGNOME
	SELECT COUNT(*),MAX(NOME),MAX(COGNOME) INTO CONTA_TURNI,NOME_IS,COGNOME_IS
	FROM TURNO JOIN ISTRUTTORE ON CF_ISTRUTTORE_TURNO = CF_ISTRUTTORE
	WHERE CF_ISTRUTTORE_TURNO = CF;

	IF (CONTA_TURNI < 1)
		THEN RAISE NOT_TURNO;
	END IF;
	
	DBMS_OUTPUT.PUT_LINE('ISTRUTTORE: ' || NOME_IS || ' ' || COGNOME_IS );
	DBMS_OUTPUT.PUT_LINE('TOTALE TURNI SVOLTI: ' || CONTA_TURNI);
-- CONTA I TURNI DELL'ULTIMO MESE E LI MOSTRA
	SELECT COUNT(*) INTO CONTA_TURNI
	FROM TURNO JOIN ISTRUTTORE ON CF_ISTRUTTORE_TURNO = CF_ISTRUTTORE
	WHERE CF_ISTRUTTORE_TURNO = CF AND DATA_TURNO > SYSDATE - 30;
	DBMS_OUTPUT.PUT_LINE('TOTALE TURNI ULTMIMO MESE: ' || CONTA_TURNI);

	OPEN LISTA;
	IF LISTA%NOTFOUND THEN CLOSE LISTA;
	END IF;

	LOOP
	FETCH LISTA INTO LISTA_IN;
	EXIT WHEN LISTA%NOTFOUND;
	DBMS_OUTPUT.PUT_LINE('DATA: ' || LISTA_IN.DATA_TURNO || ' ORA: ' || LISTA_IN.ORA_TURNO || ':00 - ' || LISTA_IN.ORA_OUT_TURNO || ':00 ');
	END LOOP;
	CLOSE LISTA; 
		
	-- SCORRIAMO I CORSI DELL'ISTRUTTORE
	OPEN CORSO_ISTRUTTORE;
	IF CORSO_ISTRUTTORE%NOTFOUND THEN CLOSE CORSO_ISTRUTTORE;
	END IF;

	LOOP
	FETCH CORSO_ISTRUTTORE INTO CORSO_I;
	EXIT WHEN CORSO_ISTRUTTORE%NOTFOUND;
	DBMS_OUTPUT.PUT_LINE('CORSO TENUTO: ' || CORSO_I.NOME_CORSO || ' PRESSO: ' || CORSO_I.CAP_CORSO);
	END LOOP;
	CLOSE CORSO_ISTRUTTORE;



EXCEPTION
	WHEN NOT_TURNO THEN
	RAISE_APPLICATION_ERROR(-20005,'NESSUN TURNO PER QUESTO ISTRUTTORE');

END LISTA_TURNI_ISTRUTTORE;
/


CREATE OR REPLACE PROCEDURE ASSEGNA_SCHEDA
(
	CF 			ISCRITTO.CF_ISCRITTO%TYPE,	
	SCHEDA 		E_ASSEGNATA.N_SCHEDA_FK%TYPE,
	DATA_F 		E_ASSEGNATA.DATA_FINE%TYPE
)
IS

WARNING 	EXCEPTION;
CAMBIAMENTO EXCEPTION;
DATAENDOLD 	DATE;
OLDSCHEDA 	NUMBER;
LIV 		SCHEDA_ESERCIZI.LIVELLO%TYPE;
LIVNEW 		SCHEDA_ESERCIZI.LIVELLO%TYPE;

BEGIN
-- PRENDIAMO IL NUMERO DELLA SCHEDA PRECEDENTE E LA DATA DI SCADENZA

SELECT N_SCHEDA_FK,DATA_FINE INTO OLDSCHEDA,DATAENDOLD
FROM E_ASSEGNATA
WHERE CF_ISCRITTO_FK = CF 
	AND DATA_FINE = (SELECT MAX(DATA_FINE) FROM E_ASSEGNATA WHERE CF_ISCRITTO_FK = CF);

-- SE ANCORA DEVE SCADERA LANCIA WARNING CHE AGGIORNA LA DATA SCADENZA AD OGGI E AVVISA L'UTENTE
IF (DATAENDOLD > SYSDATE AND SCHEDA IS NOT NULL) THEN RAISE WARNING;
END IF;

-- SE NON E STATA INSERITA LA SCHEDA PROLUNGA LA VECCHIA
IF (SCHEDA IS NULL) THEN
	DBMS_OUTPUT.PUT_LINE('AGGIORNAMENTO DELLA SCHEDA');
	UPDATE E_ASSEGNATA SET DATA_FINE = DATA_F WHERE N_SCHEDA_FK = OLDSCHEDA; 
END IF;

-- RECUPERIAMO IL LIVELLO DELLA VECCHIA SCHEDA
SELECT LIVELLO INTO LIV
FROM SCHEDA_ESERCIZI
WHERE N_SCHEDA = OLDSCHEDA;

-- RECUPERIAMO IL LIVELLO DELLA NUOVA
SELECT LIVELLO INTO LIVNEW
FROM SCHEDA_ESERCIZI
WHERE N_SCHEDA = SCHEDA;


IF (LIV IS NOT NULL AND LIV <> LIVNEW) THEN RAISE CAMBIAMENTO;
END IF;

-- ASSEGNA LA NUOVA SCHEDA
INSERT INTO E_ASSEGNATA VALUES (CF,SCHEDA,SYSDATE,DATA_F);

EXCEPTION
WHEN WARNING THEN
	DBMS_OUTPUT.PUT_LINE('LA VECCHIA SCHEDA ASSEGNATA NON ERA ANCORA SCADUTA: SARA IMPOSTATA COME DATA DI SCADENZA OGGI' );
	UPDATE E_ASSEGNATA SET DATA_FINE = SYSDATE WHERE N_SCHEDA_FK = OLDSCHEDA;
WHEN CAMBIAMENTO THEN
		DBMS_OUTPUT.PUT_LINE('LA VECCHIA SCHEDA ASSEGNATA ERA DI LIVELLO ' || LIV || ' LA NUOVA DI LIVELLO ' || LIVNEW);
END ASSEGNA_SCHEDA;
/


CREATE OR REPLACE PROCEDURE ASSEGNA_CORSO
(
	CAP_IN  		CORSO.CAP_CORSO%TYPE,
	NOME_1  		CORSO.NOME_CORSO%TYPE,
	NOME_2          CORSO.NOME_CORSO%TYPE,
	CF_I     		ISCRITTO.CF_ISCRITTO%TYPE
)

IS 
CONTROLLO_NUMERO_CORSI 	NUMBER;
TROPPI 					EXCEPTION;
BADGEI 		ABBONAMENTO.BADGE%TYPE;

BEGIN

-- CONTIAMO IL NUMERO DI CORSI GIA PRESENTI NELL ABBONAMENTO 
SELECT COUNT(*) INTO CONTROLLO_NUMERO_CORSI
FROM PREVEDE JOIN ABBONAMENTO ON BADGE_FK = BADGE 
WHERE CF_ISCRITTO_ABBONAMENTO = CF_I;

-- SE HA GIA DUE CORSI LANCIA ERRORE
IF CONTROLLO_NUMERO_CORSI > 1
	THEN RAISE TROPPI;
END IF;

--RECUPERIAMO IL BADGE DELL'ISCRITTO
SELECT BADGE INTO BADGEI
FROM ABBONAMENTO
WHERE CF_ISCRITTO_ABBONAMENTO = CF_I
	AND DATA_SCADENZA = (SELECT MAX(DATA_SCADENZA) FROM ABBONAMENTO WHERE CF_ISCRITTO_ABBONAMENTO = CF_I);

--INSERISCI NELL'ABBONAMENTO
IF (NOME_1 IS NOT NULL) THEN 
	INSERT INTO PREVEDE VALUES(BADGEI,CAP_IN,NOME_1);
	DBMS_OUTPUT.PUT_LINE('PRIMO CORSO INSERITO');
	CONTROLLO_NUMERO_CORSI := CONTROLLO_NUMERO_CORSI + 1;
END IF;

-- RIESEGUI IL CONTROLLO
IF CONTROLLO_NUMERO_CORSI > 1
	THEN RAISE TROPPI;
END IF;

--INSERISCI IL SECONDO CORSO
IF (NOME_2 IS NOT NULL) THEN 
	INSERT INTO PREVEDE VALUES(BADGEI,CAP_IN,NOME_2);
	DBMS_OUTPUT.PUT_LINE('SECONDO CORSO INSERITO');
END IF;


EXCEPTION
WHEN NO_DATA_FOUND THEN 
	CONTROLLO_NUMERO_CORSI := 0;
WHEN TROPPI THEN
	RAISE_APPLICATION_ERROR(-20567,'NON PUOI ATTIVARE PIU DI DUE CORSI');


END ASSEGNA_CORSO;
/


CREATE OR REPLACE PROCEDURE ASSUMI_ISTRUTTORE
(
	CF 			ISTRUTTORE.CF_ISTRUTTORE%TYPE,	
	NO 			ISTRUTTORE.NOME%TYPE,
	CO 			ISTRUTTORE.COGNOME%TYPE,
	CELL 		ISTRUTTORE.TELEFONO%TYPE,
	DATA 		ISTRUTTORE.DATA_NASCITA%TYPE,
	SESSO 		ISTRUTTORE.SESSO%TYPE
)
IS


BEGIN

INSERT INTO ISTRUTTORE VALUES(CF,CELL,NO,CO,SESSO,DATA);

END ASSUMI_ISTRUTTORE;
/

CREATE OR REPLACE PROCEDURE LICENZIA_ISTRUTTORE
(
	CF 			ISTRUTTORE.CF_ISTRUTTORE%TYPE
)
IS 

BEGIN
DELETE FROM ISTRUTTORE WHERE CF_ISTRUTTORE = CF;

END LICENZIA_ISTRUTTORE;
/ 	


CREATE OR REPLACE PROCEDURE CREA_EVENTO
(
	NOME 		EVENTO.NOME_EVENTO%TYPE,	
	CAP 		EVENTO.CAP_EVENTO%TYPE,
	DATA 		EVENTO.DATA%TYPE
)
IS

DOMENICA EXCEPTION;

BEGIN

IF (UPPER(TO_CHAR(DATA,'DY')) = 'SUN') THEN RAISE DOMENICA;
END IF;

INSERT INTO EVENTO VALUES (NOME,CAP,DATA);

EXCEPTION
WHEN DOMENICA THEN
	RAISE_APPLICATION_ERROR(-20567,'NON PUOI ORGANIZZARE EVENTI DI DOMENICA!');
END CREA_EVENTO;
/

